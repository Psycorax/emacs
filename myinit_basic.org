#+STARTUP: overview
#+TITLE: myinit_basic
#+AUTHOR: Psycorax
#+DATE: <2018-08-08 Mi>

* interface tweaks
  #+BEGIN_SRC emacs-lisp
    ;; hide startup screen
    (setq inhibit-startup-message t)

    ;; hide toolbar
    (tool-bar-mode -1)

    ;; change to shorter answers
    (fset 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

** themes
   There are several builtin themes that come with emacs out of the
   box, you can choose between them by typing M-x
   customize-themes. There you get an overview an can test these
   themes.  To get them into you standard configuration just type the
   following line into your configuration file.
   #+BEGIN_SRC emacs-lisp
     (load-theme 'tango-dark t)
   #+END_SRC

  highlights the line with the cursor. Needs to change cursor or face
  background, when tango-dark theme is used
  #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode t)
    ;; (set-face-background hl-line-face "DodgerBlue2")
    (set-cursor-color "DarkRed")
    ;; (list-colors-display) ;; show all colors with names
  #+END_SRC

  line numbers in buffer
  #+BEGIN_SRC emacs-lisp
    ;; For Emacs > 26
    (if (>= emacs-major-version 26)
	(progn (global-display-line-numbers-mode t)))
  #+END_SRC
* misc features
** variables and globals
** try
   This package allowes you to [[https://github.com/larstvei/Try][try]] a package before installing it.
   #+BEGIN_SRC emacs-lisp
     (use-package try
		  :ensure t)
   #+END_SRC
** hungry-delete
   [[https://github.com/nflath/hungry-delete][Hungry-delete]] deletes all whitespaces with one delete.
   #+BEGIN_SRC emacs-lisp
     (use-package hungry-delete
       :ensure t
       :config
       (global-hungry-delete-mode))
   #+END_SRC
** Expand Region
   [[https://github.com/magnars/expand-region.el][Expand-region]] expands the marked region in semantic
   increments. Control it with +, - and 0.
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :config 
       (global-set-key (kbd "C-+") 'er/expand-region))
   #+END_SRC
** TODO multiple cursors
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :ensure t
       :config
       (global-set-key (kbd "C->") 'mc/mark-next-like-this)
       (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
       (global-set-key (kbd "C-M-<") 'mc/mark-all-like-this)
       (define-key mc/keymap (kbd "<return>") nil))
   #+END_SRC

* keybindings
  Here you can use personalized keybindings.
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<f5>") 'revert-buffer)
    (global-set-key (kbd "\e\ei")
		    (lambda () (interactive) (find-file "~/Documents/git/emacs/myinit_basic.org")))
    (global-set-key (kbd "\e\ec")
			(lambda () (interactive) (find-file "~/Tests/CMakeLists.txt")))
    (global-set-key (kbd "\e\eb")
		    (lambda () (interactive) (find-file "~/Documents/git/bac/main.tex")))
    (global-set-key (kbd "\e\ep")
		    (lambda () (interactive) (find-file "~/Documents/git/pb/PrBericht__HSD_v1.tex")))
  #+END_SRC
* org-mode
** org-elpa
   This installes [[https://orgmode.org/elpa.html][org ELPA]] that is a more updated version of org than,
   built in org from gnu.
   #+BEGIN_SRC emacs-lisp
     
   #+END_SRC
** hide stars
   Hide leading stars for a better view
   #+BEGIN_SRC emacs-lisp
     (setq org-hide-leading-stars t)
   #+END_SRC

* autocomplete
** TODO auto-complete
   [[https://github.com/auto-complete/auto-complete][Auto-complete]] does... TODO.
   #+BEGIN_SRC emacs-lisp
     (unless nil
       (progn 
         (use-package auto-complete
           :ensure t)))
           ;; :hook
           ;; (org-mode . auto-complete-mode)
           ;;:init
           ;;(progn
             ;;(ac-config-default)))))
     ;; (global-auto-complete-mode t)
   #+END_SRC
*** org-ac
   [[https://github.com/aki2o/org-ac][Org-ac]] means org autocomplete it is a autocomplete for org. Don't
   use it together with company mode!!!
   #+BEGIN_SRC emacs-lisp
     (use-package org-ac
       :ensure t
       :config
       ;(require 'org-ac)
       (org-ac/config-default))
   #+END_SRC
** TODO company
   [[https://github.com/company-mode/company-mode][Company]] 
   #+BEGIN_SRC emacs-lisp
     (unless nil
       (progn
	 (use-package company
	   :ensure t
	   :config
	   (setq company-idle-delay 0)
	   (setq company-minimum-prefix-length 3))))
	   ;; (global-company-mode t)
   #+END_SRC
* buffers
** builtin
   ibuffer is an enhanced builtin buffer view
   #+BEGIN_SRC emacs-lisp
     (defalias 'list-buffers 'ibuffer-other-window)
   #+END_SRC
* windows
** builtin
*** winner-mode
    Saves old window configurations. Mmove through them by pressing
    C-c left or right.
    #+BEGIN_SRC emacs-lisp
      (winner-mode 1)
    #+END_SRC

** ace-window
   [[https://github.com/abo-abo/ace-window][ace-window]] switching with C-x o but then with numbers
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :init
       (progn
	 (global-set-key [remap other-window] 'ace-window)
	 (custom-set-faces
	  '(aw-leading-char-face
	    ((t (:inherit ace-jump-face-foreground :height 4.0))))) 
	 ))
   #+END_SRC
* Flyspell
  #+BEGIN_SRC emacs-lisp
    (add-hook 'latex-mode-hook 'flyspell-mode)
    (setq ispell-dictionary "deutsch8")
  #+END_SRC
* navigation(search)
** builtin
   built in completion with [[https://www.masteringemacs.org/article/introduction-to-ido-mode][ido mode]] comment out ido when ivy is in
   use
   #+BEGIN_SRC emacs-lisp
     ;; (setq ido-enable-flex-matching t)
     ;; (setq ido-everywhere t)
     ;; (ido-mode 1)
   #+END_SRC
   aswell M-/ could be used, it looks for all previous words dynamically
** Swiper Ivy Counsel
*** TODO counsel
    is aswell needed for swiper
    #+BEGIN_SRC emacs-lisp
      (use-package counsel
        :ensure t
        :bind
        (("M-y" . counsel-yank-pop)
         :map ivy-minibuffer-map
         ("M-y" . ivy-next-line)))
    #+END_SRC
*** ivy
    TODO does what???
    #+BEGIN_SRC emacs-lisp
      (use-package ivy
        :ensure t
        :diminish (ivy-mode)
        :bind ("C-x b" . ivy-switch-buffer)
        :config
        (ivy-mode 1)
        (setq ivy-use-virtual-buffers t)
        (setq ivy-display-style 'fancy))
    #+END_SRC
*** swiper
    [[https://github.com/abo-abo/swiper][Swiper]] is a alternative to the built in isearch with [[https://github.com/abo-abo/swiper][swiper]], there
    is no more C-s and C-r needed to search and search
    backward. [[https://github.com/abo-abo/swiper][Swiper]] is based on ivy-mode.
    #+BEGIN_SRC emacs-lisp
      (use-package swiper
        :ensure t
        :bind (("C-s" . swiper)
              ("C-r" . swiper)
              ("C-c C-r" . ivy-resume)
              ("M-x" . counsel-M-x)
              ("C-x C-f" . counsel-find-file))
        :config
        (progn
          (ivy-mode 1)
          (setq ivy-use-virtual-buffers t)
          (setq ivy-display-style 'fancy)
          (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
          ))
    #+END_SRC
** avy
   [[https://github.com/abo-abo/avy][Avy]] is used like a search, but just to visible text. It uses a
   char-based decision tree.  an alternative would be [[https://github.com/winterTTr/ace-jump-mode][ace-jump-mode]].
   Also avy-goto-char-2 is available, there you have to type in 2
   chars of the word you are looking for, instead of one. This results
   in a smaller decision tree.
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :bind ("M-s" . avy-goto-char))
   #+END_SRC
* undo tree
  [[https://www.emacswiki.org/emacs/UndoTree][Undo-tree]] vizualizes the undo mechanic and enables the choice to
  switch into old undo branches if needed. Acessable through C-x u.
  #+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
  #+END_SRC
* GIT
** magit
   [[https://magit.vc/][Magit]] is a...
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :bind ("C-x g" . 'magit-status)
       :init
       (defface magit-section-highlight
         '((((class color) (background light)) :background "gold5")
           (((class color) (background  dark)) :background "gold4"))
         "Face for highlighting the current section."
         :group 'magit-faces))
   #+END_SRC
* python
  If python packages are needed use t for true otherwise nil.

  For python we use [[http://www.flycheck.org/en/latest/][flycheck]] for a live syntax checker.  For better
  completion for python we use [[https://github.com/davidhalter/jedi][Jedi]].  [[https://github.com/jorgenschaefer/elpy][Elpy]] combines a syntax checker,
  a project manager, a completion. Choose wich one you like. [[https://github.com/joaotavora/yasnippet][Yasnippet]]
  is a package for making templates, that can be saved in the snippets
  folder.
  #+BEGIN_SRC emacs-lisp
    (unless t
      (progn
	(use-package flycheck
	  :ensure t
	  :init
	  (global-flycheck-mode t))

	(use-package jedi
	  :ensure t
	  :init
	  (add-hook 'python-mode-hook 'jedi:setup)
	  (add-hook 'python-mode-hook 'jedi:ac-setup))

	(use-package elpy
	  :ensure t
	  :config 
	  (elpy-enable))

	(use-package yasnippet
	  :ensure t
	  :config
	  (use-package yasnippet-snippets
	    :ensure t)
	  (yas-reload-all))

	(add-hook 'python-mode-hook 'yas-minor-mode)

	(defun build-ctags ()
	  (interactive)
	  (message "building project tags")
	  (let ((root "/"))
	    (shell-command (concat "ctags -e -R --extra=+fq --exclude=db --exclude=test --exclude=.git --exclude=public -f " root "TAGS " root)))
	  (visit-project-tags)
	  (message "tags built successfully"))

	(defun build-python ()
	  (interactive)
	  (message "building python project")
	  (let ((root "/"))
	    (shell-command (concat "pdflatex -synctex=1 -halt-on-error -output-directory=build main.tex")))
	  (message "python project built successfully"))
	))
  #+END_SRC
* web-mode
  If web development packages are needed use t for true otherwise nil.

  [[http://web-mode.org/][Web-mode]] is a enhanced mode for web development, because html-mode
  is not working with included css or java stuff. [[http://web-mode.org/][Web-mode]] is fixing
  these issues.
  #+BEGIN_SRC emacs-lisp
    (unless t
        (progn
          (use-package web-mode
            :ensure t
            :config
            (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
            (setq web-mode-engines-alist
                  '(("django"    . "\\.html\\'")))
            (setq web-mode-ac-sources-alist
                  '(("css" . (ac-source-css-property))
                    ("html" . (ac-source-words-in-buffer ac-source-abbrev))))

            (setq web-mode-enable-auto-closing t)
            (setq web-mode-enable-auto-quoting t))))
  #+END_SRC
* C++
  If C/C++ packages are executed with typing nil.

  For C/C++ we use [[http://www.flycheck.org/en/latest/][flycheck]] for a live syntax checker.  For better
  completion for python we use [[https://github.com/davidhalter/jedi][Jedi]].  [[https://github.com/jorgenschaefer/elpy][Elpy]] combines a syntax checker,
  a project manager, a completion. Choose wich one you like. [[https://github.com/joaotavora/yasnippet][Yasnippet]]
  is a package for making templates, that can be saved in the snippets
  folder.
  set indent:
  (setq c-basic-offset 4)
  #+BEGIN_SRC emacs-lisp
    (unless t
	(progn
	  (use-package flycheck
	    :ensure t
	    :init
	    (global-flycheck-mode t))


	   ;; (use-package rtags
	   ;;  :ensure t)

	  ;; (use-package auto-complete-clang
	  ;; 	:ensure t)

	  ;;(use-package ac-clang
	  ;;   :ensure t)

	  (use-package company-irony
	    :ensure t
	    :config 
	    (add-to-list 'company-backends 'company-irony))

	  (use-package irony
	    :ensure t
	    :config
	    (add-hook 'c++-mode-hook 'irony-mode)
	    (add-hook 'c-mode-hook 'irony-mode)
	    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

	  (with-eval-after-load 'company
	    (add-hook 'C++-mode-hook 'company-mode)
	    (add-hook 'C-mode-hook 'company-mode))

	  (use-package yasnippet
	    :ensure t
	    :config
	    (use-package yasnippet-snippets
	      :ensure t)
	    (yas-reload-all))

	  (add-hook 'c-mode-hook 'yas-minor-mode)
	  (add-hook 'c++-mode-hook 'yas-minor-mode)
	  (add-hook 'cmake-mode-hook 'yas-minor-mode)

	  (use-package company-irony-c-headers
	    :ensure t)

	  (eval-after-load 'company
	    '(add-to-list
	      'company-backends '(company-irony-c-headers company-irony)))

	  ;; (load-file "~/Documents/git/rtags/src/rtags.el")
	  ;; (setq rtags-path "~/Documents/git/rtags/bin")

	  ;; (use-package cmake-ide
	  ;; 	:ensure t)

	  ;; (setq cmake-ide-rdm-executable "~/Documents/git/rtags/bin/rdm")
	  ;; (setq cmake-ide-rc-executable "~/Documents/git/rtags/bin/rc")
	  ;; (setq cmake-ide-build-dir "../build")

	  ;; (cmake-ide-setup)
	  ))
  #+End_SRC

  #+BEGIN_SRC emacs-lisp
    (defun build-C-Cpp ()
      (interactive)
      (message "executing cmake and make(need to be in the src directory!)")
      ;; check if directories exist
      (unless (file-directory-p "../release")
	(progn (mkdir "../release")))
      (unless (file-directory-p "../debug")
	(progn (mkdir "../debug")))
      (unless (file-directory-p "../bin")
	(progn (mkdir "../bin")))
      (cd "../release")
      (shell-command "cmake -DCMAKE_BUILD_TYPE=Release ..")
      (shell-command "make")
      (cd "../debug")
      (shell-command "cmake -DCMAKE_BUILD_TYPE=Debug ..")
      (shell-command "make")
      (cd "../src")
      )
    (defun mkdir-C-CPP ()
      (interactive)
      (message "making default C-Cpp project directory")
      (setq myFileName (nth 0 (split-string (nth (-(length(split-string (buffer-file-name) "/")) 1)(split-string (buffer-file-name) "/")) "\\.")))
      (setq myFileEnding (substring (nth 1 (split-string (nth (-(length(split-string (buffer-file-name) "/")) 1)(split-string (buffer-file-name) "/")) "\\.")) 0))
      (if (equal myFileEnding "txt")
	  (progn
	    (message "Insert Directoryname: ")
	    (setq myDirName (read-from-minibuffer "Projecdirectoryname: "))
	    (shell-command (concat "mkdir -p " myDirName "/{src,inc,doc,tests}"))
	    (shell-command (concat "mv " myFileName "." myFileEnding " ./" myDirName "/" myFileName "." myFileEnding))
	    (kill-buffer (concat myFileName "." myFileEnding))
	    (cd (concat myDirName"/src"))
	    (find-file "main.cpp")
	    )))
    (defun debug-C-CPP ()
      (interactive)
      (message "debug C-Cpp Project")
      (gdb-enable-debug)
      (gdb-many-windows)
      (gdb "gdb -i=mi ../bin/dbg")
      )
  #+END_SRC
  
* LaTeX
  packages for latex auf linux: sudo apt-get install
  texlive-latex-recommended texlive-latex-extra
  texlive-fonts-recommended texlive-base texlive-latex-base
  #+BEGIN_SRC emacs-lisp
    (unless nil
      (progn 
        (defun build-latex ()
          (interactive)
          (message "building pdf")
          ;; check if directories exist
          (unless (file-directory-p "./build")
            (progn (mkdir "./build")))
          (if (file-directory-p "./front")
              (progn (unless (file-directory-p "./build/front")
                       (progn (mkdir "./build/front")))))
          (if (file-directory-p "./back")
              (progn (unless (file-directory-p "./build/back")
                       (progn (mkdir "./build/back")))))
          (if (file-directory-p "./chapters")
              (progn (unless (file-directory-p "./build/chapters")
                       (progn (mkdir "./build/chapters")))))
          (unless (file-exists-p "./build/main.bcf")
            (progn (shell-command (concat "pdflatex -synctex=1 -halt-on-error -output-directory=build " buffer-file-name))))
          (shell-command (concat "biber ./build/main"))
          (shell-command (concat "pdflatex -synctex=1 -halt-on-error -output-directory=build " buffer-file-name))
          ;;(message "pdf built successfully")
          )
        (defun mkdir-latex ()
          (interactive)
          (message "making default latex project directory")
          (setq myFileName (nth 0 (split-string (nth (-(length(split-string (buffer-file-name) "/")) 1)(split-string (buffer-file-name) "/")) "\\.")))
          (setq myFileEnding (substring (nth 1 (split-string (nth (-(length(split-string (buffer-file-name) "/")) 1)(split-string (buffer-file-name) "/")) "\\.")) 0 3))
          (if (equal myFileEnding "tex")
              (progn
                (shell-command (concat "mkdir -p " myFileName "/{images}"))
                (shell-command (concat "mv " myFileName "." myFileEnding " ./" myFileName "/" myFileName "." myFileEnding))
                )))))
  #+END_SRC

* which operation system type 
  [[http://ergoemacs.org/emacs/elisp_determine_OS_version.html][Quelle]]
  #+BEGIN_SRC emacs-lisp
    ;; check OS type
    (cond
     ((string-equal system-type "windows-nt") ; Microsoft Windows
      (progn
	(message "Microsoft Windows")))
     ((string-equal system-type "darwin") ; Mac OS X
      (progn
	(message "Mac OS X")))
     ((string-equal system-type "gnu/linux") ; linux
      (progn
	(message "Linux"))))
  #+END_SRC
