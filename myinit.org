#+STARTUP: overview
#+TITLE: My Initfile
#+AUTHOR: Thomas Reisinger

* interface tweaks
  #+BEGIN_SRC emacs-lisp
    ;; hide startup screen
    (setq inhibit-startup-message t)

    ;; hide toolbar
    (tool-bar-mode -1)

    ;; change to shorter answers
    (fset 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

highlights the line with the cursor
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC

** beacon
   flashes the cursor when scrolling
   
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1)
    (setq beacon-color "#666600")
    )
#+END_SRC

* misc features
** try
   This package allowes you to [[https://github.com/larstvei/Try][try]] a package before installing it.
   #+BEGIN_SRC emacs-lisp
     (use-package try
		  :ensure t)
   #+END_SRC
** which key
   [[https://github.com/justbur/emacs-which-key][Whick-key]] does... TODO.
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config
       (which-key-mode))
   #+END_SRC
** hungry-delete
   [[https://github.com/nflath/hungry-delete][Hungry-delete]] deletes all whitespaces with one delete.
   #+BEGIN_SRC emacs-lisp
     (use-package hungry-delete
       :ensure t
       :config
       (global-hungry-delete-mode))
   #+END_SRC
** Expand Region
   [[https://github.com/magnars/expand-region.el][Expand-region]] expands the marked region in semantic
   increments. Control it with +, - and 0.
   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :config 
       (global-set-key (kbd "C-+") 'er/expand-region))
   #+END_SRC
** TODO Smart Region
** narrow and widen
   For easier use of narrow and widen, the following code helps, it
   narrows when widen and it widens when the page is narrowed.  This
   code is from [[http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html][Endless Parentheses]], a bit customized.
   #+BEGIN_SRC emacs-lisp
     (defun narrow-or-widen-dwim (p)
       "Widen if buffer is narrowed, narrow-dwim otherwise.
     Dwim means: region, org-src-block, org-subtree, or
     defun, whichever applies first. Narrowing to
     org-src-block actually calls `org-edit-src-code'.

     With prefix P, don't widen, just narrow even if buffer
     is already narrowed."
       (interactive "P")
       (declare (interactive-only))
       (cond ((and (buffer-narrowed-p) (not p)) (widen))
	     ((region-active-p)
	      (narrow-to-region (region-beginning)
				(region-end)))
	     ((derived-mode-p 'org-mode)
	      ;; `org-edit-src-code' is not a real narrowing
	      ;; command. Remove this first conditional if
	      ;; you don't want it.
	      (cond ((ignore-errors (org-edit-src-code) t)
		     (delete-other-windows))
		    ((ignore-errors (org-narrow-to-block) t))
		    (t (org-narrow-to-subtree))))
	     ((derived-mode-p 'latex-mode)
	      (LaTeX-narrow-to-environment))
	     (t (narrow-to-defun))))

     ;;(define-key endless/toggle-map "n"
     ;;  #'narrow-or-widen-dwim)
     ;; This line actually replaces Emacs' entire narrowing
     ;; keymap, that's how much I like this command. Only
     ;; copy it if that's what you want.
     (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
     (add-hook 'LaTeX-mode-hook
	       (lambda ()
		 (define-key LaTeX-mode-map "\C-xn"
		   nil)))
   #+END_SRC
** iedit
   [[https://github.com/victorhge/iedit][Iedit]] is for enhaced editing, like replacing. Very powerfull
   because it has nomething like an built in narrowing, widening and
   expand region for marked word. TODO: Check 18 comments for more choices
   of multiple editing.
   #+BEGIN_SRC emacs-lisp
     (use-package iedit
       :ensure t)
   #+END_SRC
** multiple cursors
* keybindings
  Here you can use personalized keybindings.
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<f5>") 'revert-buffer)
  #+END_SRC

* org-mode
  this installes [[https://orgmode.org/elpa.html][org ELPA]] that is a more updated version of org than,
  built in org from gnu.
  #+BEGIN_SRC emacs-lisp
    (use-package org
      :ensure t
      :pin org)
  #+END_SRC
** org bullets
   fancy bullets instead of stars
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC
* autocomplete
** builtin
   built in autocomplete with [[https://www.masteringemacs.org/article/introduction-to-ido-mode][ido mode]]
   comment out ido when swiper is in use
   #+BEGIN_SRC emacs-lisp
     ;(setq ido-enable-flex-matching t)
     ;(setq ido-everywhere t)
     ;(ido-mode 1)
   #+END_SRC
   aswell M-/ could be used, it looks for all previous words dynamically
** TODO auto-complete
   [[https://github.com/auto-complete/auto-complete][Auto-complete]] does... TODO.
   #+BEGIN_SRC emacs-lisp
     (use-package auto-complete
       :ensure t
       :init
       (progn
	 (ac-config-default)
	 (global-auto-complete-mode t)
	 ))
   #+END_SRC
** TODO helm
   #+BEGIN_SRC emacs-lisp
   
   #+END_SRC

* buffers
** builtin
   ibuffer is an enhanced builtin buffer view
   #+BEGIN_SRC emacs-lisp
     (defalias 'list-buffers 'ibuffer-other-window)
   #+END_SRC
** tabbar
   tabbar is a package that ads tabbars for the buffers
   #+BEGIN_SRC emacs-lisp
     (use-package tabbar
       :ensure t
       :config (tabbar-mode 1)
       )
   #+END_SRC
** TODO tabbar-ruler
   fancier tabbar [[https://github.com/mattfidler/tabbar-ruler.el][tabbar ruler]]
   #+BEGIN_SRC emacs-lisp

   #+END_SRC
* windows
** builtin
*** windmove
    Switch the windows by holding down the shift-key and using the
    arrows. Does not work in all modes, because shortcuts are
    used. Needs 4 keybindings to work properly.
    #+BEGIN_SRC emacs-lisp
      ;(windmove-default-keybindings)
    #+END_SRC
*** winner-mode
    Saves old window configurations. Mmove through them by pressing
    C-c left or right.
    #+BEGIN_SRC emacs-lisp
      (winner-mode 1)
    #+END_SRC

** ace-window
   [[https://github.com/abo-abo/ace-window][ace-window]] switching with C-x o but then with numbers
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :init
       (progn
	 (global-set-key [remap other-window] 'ace-window)
	 (custom-set-faces
	  '(aw-leading-char-face
	    ((t (:inherit ace-jump-face-foreground :height 4.0))))) 
	 ))
   #+END_SRC
* navigation(search)
** Swiper Ivy Counsel
*** TODO counsel
    is aswell needed for swiper
    #+BEGIN_SRC emacs-lisp
      (use-package counsel
	:ensure t
	)
    #+END_SRC
*** ivy
    TODO does what???
    #+BEGIN_SRC emacs-lisp
      (use-package ivy
	:ensure t
	:diminish (ivy-mode)
	:bind ("C-x b" . ivy-switch-buffer)
	:config
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy))
    #+END_SRC
*** swiper
    [[https://github.com/abo-abo/swiper][Swiper]] is a alternative to the built in isearch with [[https://github.com/abo-abo/swiper][swiper]], there
    is no more C-s and C-r needed to search and search
    backward. [[https://github.com/abo-abo/swiper][Swiper]] is based on ivy-mode.
    #+BEGIN_SRC emacs-lisp
      (use-package swiper
	:ensure t
	:bind (("C-s" . swiper)
	       ("C-r" . swiper)
	       ("C-c C-r" . ivy-resume)
	       ("M-x" . counsel-M-x)
	       ("C-x C-f" . counsel-find-file))
	:config
	(progn
	  (ivy-mode 1)
	  (setq ivy-use-virtual-buffers t)
	  (setq ivy-display-style 'fancy)
	  (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	  ))
    #+END_SRC
** avy
   [[https://github.com/abo-abo/avy][Avy]] is used like a search, but just to visible text. It uses a
   char-based decision tree.  an alternative would be [[https://github.com/winterTTr/ace-jump-mode][ace-jump-mode]].
   Also avy-goto-char-2 is available, there you have to type in 2
   chars of the word you are looking for, instead of one. This results
   in a smaller decision tree.
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :bind ("M-s" . avy-goto-char))
   #+END_SRC
* themes
** builtin
   There are several builtin themes that come with emacs out of the
   box, you can choose between them by typing M-x
   customize-themes. There you get an overview an can test these
   themes.  To get them into you standard configuration just type the
   following line into your configuration file.
   #+BEGIN_SRC emacs-lisp
     ;(load-theme 'tango-dark t)
   #+END_SRC

** external themes
   themes made by the community
   [[https://pawelbx.github.io/emacs-theme-gallery/][theme galery 1]]
   [[https://emacsthemes.com/][theme galery 2]]
*** zenburn
    [[https://github.com/bbatsov/zenburn-emacs][zenburn-theme]]
    #+BEGIN_SRC emacs-lisp
      (use-package zenburn-theme
	:ensure t
	:config (load-theme 'zenburn t))
    #+END_SRC
*** hemisu
    [[https://github.com/andrzejsliwa/hemisu-theme][hemisu-theme]]
    #+BEGIN_SRC emacs-lisp
      ;(use-package hemisu-theme
      ;  :ensure t
      ;  :config (load-theme 'hemisu-dark t))
    #+END_SRC
* presentation
** org-reveal
   [[https://github.com/yjwen/org-reveal][Org-reveal]] works with [[https://github.com/hakimel/reveal.js/][reveal.js]], that is basically an javascript
   library for easy presentations written in html. [[https://github.com/yjwen/org-reveal][Org-reveal]] is now
   able to export an org file to a html site that can be opend in
   every browser. It is very easy to use and looks fancy, i recommend
   it for every kind of presentation that has no special things in it.
   Attention: ox-reveal needs [[https://orgmode.org/elpa.html][Org ELPA]], because Org builtin from gnu,
   is mostly outdated.
   #+BEGIN_SRC emacs-lisp
     (use-package ox-reveal
       :ensure t
       :config
       (require 'ox-reveal)
       (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
       (setq org-reveal-mathjax t)
       )

       ; for syntax highliting of the html code
     (use-package htmlize
       :ensure t)
   #+END_SRC

** TODO beamer
** TODO that one that works directly in org mode
* undo tree
  [[https://www.emacswiki.org/emacs/UndoTree][Undo-tree]] vizualizes the undo mechanic and enables the choice to
  switch into old undo branches if needed. Acessable through C-x u.
  #+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
  #+END_SRC
* python
  If python packages are needed use t for true otherwise nil.  For
  python we use [[http://www.flycheck.org/en/latest/][flycheck]] for a live syntax checker.  For better
  completion for python we use [[https://github.com/davidhalter/jedi][Jedi]].  [[https://github.com/jorgenschaefer/elpy][Elpy]] combines a syntax checker,
  a project manager, a completion. Choose wich one you like. [[https://github.com/joaotavora/yasnippet][Yasnippet]]
  is a package for making templates, that can be saved in the snippets
  folder.
  #+BEGIN_SRC emacs-lisp
    (if nil
	(progn
	  (use-package flycheck
	    :ensure t
	    :init
	    (global-flycheck-mode t))

	  (use-package jedi
	    :ensure t
	    :init
	    (add-hook 'python-mode-hook 'jedi:setup)
	    (add-hook 'python-mode-hook 'jedi:ac-setup))

	  (use-package elpy
	    :ensure t
	    :config 
	    (elpy-enable))

	  (use-package yasnippet
	    :ensure t
	    :init
	    (yas-global-mode 1))))
  #+END_SRC
